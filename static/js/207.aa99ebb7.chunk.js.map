{"version":3,"file":"static/js/207.aa99ebb7.chunk.js","mappings":"oLACA,QAA4B,6BAA5B,EAAsE,8BAAtE,EAAuH,oCAAvH,EAA6K,mCAA7K,EAAuN,wB,aCEvN,MA0BA,EA1BkBA,IAEdC,EAAAA,EAAAA,MAAA,UAAQC,UAAWC,EAAiBC,SAAA,EAClCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,mBACJH,EAAAA,EAAAA,MAAA,QAAMK,SAAUN,EAAMM,SAAUJ,UAAWC,EAAkBC,SAAA,EAC3DC,EAAAA,EAAAA,KAAA,UAAQE,KAAK,SAASL,UAAWC,EAAwBC,UACvDC,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EAAYC,UAC1BC,EAAAA,EAAAA,KAAA,QAAMG,EAAE,yWAGZH,EAAAA,EAAAA,KAAA,SACEE,KAAK,OACLE,aAAa,MACbC,WAAS,EACTC,YAAY,sBACZT,UAAWC,U,sBCjBrB,QAAsC,oCAAtC,EAA6F,iCC4E7F,EAtEeS,KACb,MAAOC,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,KACxCC,EAAaC,IAAkBF,EAAAA,EAAAA,UAAS,KACxCG,EAASC,IAAcJ,EAAAA,EAAAA,WAAS,IAChCK,EAAOC,IAAYN,EAAAA,EAAAA,UAAS,OAC5BO,EAAaC,IAAkBR,EAAAA,EAAAA,UAAS,IACxCS,EAAYC,IAAiBV,EAAAA,EAAAA,UAAS,IAE7CW,EAAAA,EAAAA,YAAU,KACmB,KAAvBb,EAAYc,OAIhBC,iBACE,IACET,GAAW,GACX,MAAMU,QAAaC,EAAAA,EAAAA,IAAiBjB,EAAaS,GACjDL,EAAeY,EAAKE,SACpBN,EAAcI,EAAKG,YAKrB,CAJE,MAAOZ,GACPC,EAASD,EAAMa,QACjB,CAAC,QACCd,GAAW,EACb,CACF,CACAe,GAfEjB,EAAe,GAeJ,GACZ,CAACJ,EAAaS,IAEjB,MAOMa,EAAmBC,IACvBb,EAAea,EAAK,EAGtB,OACEnC,EAAAA,EAAAA,MAAAoC,EAAAA,SAAA,CAAAjC,SAAA,EACEC,EAAAA,EAAAA,KAACiC,EAAS,CAAChC,SAbMiC,IACnBA,EAAMC,iBACN1B,EAAeyB,EAAME,OAAO,GAAGC,OAC/BnB,EAAe,GACfgB,EAAME,OAAOE,OAAO,IAUjBzB,IAAWb,EAAAA,EAAAA,KAACuC,EAAAA,EAAM,IAClBxB,IAASnB,EAAAA,EAAAA,MAAA,OAAAG,SAAA,CAAK,UAAQgB,MACrBF,IAAYE,IAASf,EAAAA,EAAAA,KAACwC,EAAAA,EAAU,CAAChB,KAAMb,IACxCQ,EAAa,IACZvB,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAA2BC,SAAA,EACzCC,EAAAA,EAAAA,KAAA,UACEyC,QAASA,IAAMX,EAAiBb,EAAc,GAC9CyB,SAA0B,IAAhBzB,EACVpB,UAAWC,EAAwBC,SACpC,UAGDH,EAAAA,EAAAA,MAAA,QAAAG,SAAA,CAAM,QACEkB,EAAY,OAAKE,KACjB,KACRnB,EAAAA,EAAAA,KAAA,UACEyC,QAASA,IAAMX,EAAiBb,EAAc,GAC9CyB,SAAUzB,IAAgBE,EAC1BtB,UAAWC,EAAwBC,SACpC,cAKJ,C","sources":["webpack://react-homework-template/./src/components/pages/movies/SearchBar.module.css?f106","components/pages/movies/SearchBar.jsx","webpack://react-homework-template/./src/components/pages/movies/Movies.module.css?c986","components/pages/movies/Movies.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"searchbar\":\"SearchBar_searchbar__2FKa1\",\"searchForm\":\"SearchBar_searchForm__KhEkG\",\"searchFormButton\":\"SearchBar_searchFormButton__4XTOy\",\"searchFormInput\":\"SearchBar_searchFormInput__EIdSM\",\"icon\":\"SearchBar_icon__tlcF3\"};","import PropTypes from 'prop-types';\nimport styles from './SearchBar.module.css';\n\nconst SearchBar = props => {\n  return (\n    <header className={styles.searchbar}>\n      <h1>Search movies</h1>\n      <form onSubmit={props.onSubmit} className={styles.searchForm}>\n        <button type=\"submit\" className={styles.searchFormButton}>\n          <svg className={styles.icon}>\n            <path d=\"M31.008 27.231l-7.58-6.447c-0.784-0.705-1.622-1.029-2.299-0.998 1.789-2.096 2.87-4.815 2.87-7.787 0-6.627-5.373-12-12-12s-12 5.373-12 12 5.373 12 12 12c2.972 0 5.691-1.081 7.787-2.87-0.031 0.677 0.293 1.515 0.998 2.299l6.447 7.58c1.104 1.226 2.907 1.33 4.007 0.23s0.997-2.903-0.23-4.007zM12 20c-4.418 0-8-3.582-8-8s3.582-8 8-8 8 3.582 8 8-3.582 8-8 8z\"></path>\n          </svg>\n        </button>\n        <input\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Enter a movie title\"\n          className={styles.searchFormInput}\n        />\n      </form>\n    </header>\n  );\n};\n\nSearchBar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default SearchBar;\n","// extracted by mini-css-extract-plugin\nexport default {\"paginationContainer\":\"Movies_paginationContainer__DZc1K\",\"paginationButton\":\"Movies_paginationButton__9ixX8\"};","import React, { useEffect, useState } from 'react';\nimport { createApiRequest } from '../../TheMovieDatabaseAPI';\nimport SearchBar from 'components/pages/movies/SearchBar';\nimport MoviesList from 'components/pages/movies/MoviesList';\nimport Loader from '../../Loader/Loader';\nimport styles from './Movies.module.css';\n\nconst Movies = () => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [moviesArray, setMoviesArray] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n\n  useEffect(() => {\n    if (searchQuery.trim() === '') {\n      setMoviesArray([]);\n      return;\n    }\n    async function fetchMovies() {\n      try {\n        setLoading(true);\n        const data = await createApiRequest(searchQuery, currentPage);\n        setMoviesArray(data.results);\n        setTotalPages(data.total_pages);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchMovies();\n  }, [searchQuery, currentPage]);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    setSearchQuery(event.target[1].value);\n    setCurrentPage(1);\n    event.target.reset();\n  };\n\n  const handlePageChange = page => {\n    setCurrentPage(page);\n  };\n\n  return (\n    <>\n      <SearchBar onSubmit={handleSubmit} />\n      {loading && <Loader />}\n      {error && <div>Error: {error}</div>}\n      {!loading && !error && <MoviesList data={moviesArray} />}\n      {totalPages > 0 && (\n        <div className={styles.paginationContainer}>\n          <button\n            onClick={() => handlePageChange(currentPage - 1)}\n            disabled={currentPage === 1}\n            className={styles.paginationButton}\n          >\n            Prev\n          </button>\n          <span>\n            Page {currentPage} of {totalPages}\n          </span>{' '}\n          <button\n            onClick={() => handlePageChange(currentPage + 1)}\n            disabled={currentPage === totalPages}\n            className={styles.paginationButton}\n          >\n            Next\n          </button>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["props","_jsxs","className","styles","children","_jsx","onSubmit","type","d","autoComplete","autoFocus","placeholder","Movies","searchQuery","setSearchQuery","useState","moviesArray","setMoviesArray","loading","setLoading","error","setError","currentPage","setCurrentPage","totalPages","setTotalPages","useEffect","trim","async","data","createApiRequest","results","total_pages","message","fetchMovies","handlePageChange","page","_Fragment","SearchBar","event","preventDefault","target","value","reset","Loader","MoviesList","onClick","disabled"],"sourceRoot":""}