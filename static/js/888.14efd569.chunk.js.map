{"version":3,"file":"static/js/888.14efd569.chunk.js","mappings":"sMACA,QAA4B,wBAA5B,EAAiE,yBAAjE,EAAyG,2BAAzG,EAAgJ,wBAAhJ,EAAyL,6B,aCKzL,MAuDA,EAvDaA,KACX,MAAOC,EAASC,IAAcC,EAAAA,EAAAA,UAAS,KAChCC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,IACjC,QAAEG,IAAYC,EAAAA,EAAAA,MAwBpB,OAtBAC,EAAAA,EAAAA,YAAU,KAkBHF,GAjBLG,iBACE,IACEJ,GAAW,GACX,MACMK,SADiBC,EAAAA,EAAAA,IAAeL,IACLM,KAAKC,KAAIC,IAAK,IAC1CA,EACHC,aAAcD,EAAMC,aAAY,mCAAAC,OACOF,EAAMC,cACzC,oDAENb,EAAWQ,EAKb,CAJE,MAAOO,GACPC,QAAQD,MAAM,uBAAwBA,EACxC,CAAC,QACCZ,GAAW,EACb,CACF,CAEAc,EAAW,GACV,CAACb,KAGFc,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CACGjB,IAAWkB,EAAAA,EAAAA,KAACC,EAAAA,EAAM,IAClBtB,EAAQuB,OAAS,EAChBvB,EAAQY,KAAIY,IAA4C,IAA3C,aAAEV,EAAY,KAAEW,EAAI,UAAEC,EAAS,GAAEC,GAAIH,EAChD,OACEL,EAAAA,EAAAA,MAAA,OAAcS,UAAWC,EAAiBT,SAAA,EACxCC,EAAAA,EAAAA,KAAA,OACES,IAAKhB,EACLiB,IAAKN,EACLG,UAAWC,KAEbV,EAAAA,EAAAA,MAAA,OAAKS,UAAWC,EAAoBT,SAAA,EAClCC,EAAAA,EAAAA,KAAA,QAAMO,UAAWC,EAAiBT,SAAEK,KACpCN,EAAAA,EAAAA,MAAA,QAAMS,UAAWC,EAAsBT,SAAA,CAAC,cAC1BM,UATRC,EAYJ,KAIVN,EAAAA,EAAAA,KAAA,KAAAD,SAAG,2DAED,C","sources":["webpack://react-homework-template/./src/components/pages/movies/Cast.module.css?174e","components/pages/movies/Cast.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"cast_item\":\"Cast_cast_item__t5OGp\",\"cast_image\":\"Cast_cast_image__KxuLL\",\"cast_details\":\"Cast_cast_details__lJbks\",\"cast_name\":\"Cast_cast_name__+oTM0\",\"cast_character\":\"Cast_cast_character__Yu63h\"};","import { useParams } from 'react-router-dom';\nimport { fetchMovieCast } from '../../TheMovieDatabaseAPI';\nimport { useEffect, useState } from 'react';\nimport Loader from '../../Loader/Loader';\nimport styles from './Cast.module.css';\n\nconst Cast = () => {\n  const [credits, setCredits] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function fetchCast() {\n      try {\n        setLoading(true);\n        const response = await fetchMovieCast(movieId);\n        const modifiedCredits = response.cast.map(actor => ({\n          ...actor,\n          profile_path: actor.profile_path\n            ? `https://image.tmdb.org/t/p/w500/${actor.profile_path}`\n            : 'https://source.unsplash.com/500x750/?no-photo',\n        }));\n        setCredits(modifiedCredits);\n      } catch (error) {\n        console.error('Error fetching cast:', error);\n      } finally {\n        setLoading(false);\n      }\n    }\n    if (!movieId) return;\n    fetchCast();\n  }, [movieId]);\n\n  return (\n    <div>\n      {loading && <Loader />}\n      {credits.length > 0 ? (\n        credits.map(({ profile_path, name, character, id }) => {\n          return (\n            <div key={id} className={styles.cast_item}>\n              <img\n                src={profile_path}\n                alt={name}\n                className={styles.cast_image}\n              />\n              <div className={styles.cast_details}>\n                <span className={styles.cast_name}>{name}</span>\n                <span className={styles.cast_character}>\n                  Character: {character}\n                </span>\n              </div>\n            </div>\n          );\n        })\n      ) : (\n        <i>   Sorry! There are no infos about casting.</i>\n      )}\n    </div>\n  );\n};\n\nexport default Cast;\n"],"names":["Cast","credits","setCredits","useState","loading","setLoading","movieId","useParams","useEffect","async","modifiedCredits","fetchMovieCast","cast","map","actor","profile_path","concat","error","console","fetchCast","_jsxs","children","_jsx","Loader","length","_ref","name","character","id","className","styles","src","alt"],"sourceRoot":""}